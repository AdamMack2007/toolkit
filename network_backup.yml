---
- name: BACKUP ROUTER CONFIGURATIONS
  hosts: all
  gather_facts: no

  tasks:
    - name: BACKUP CONFIGURATION
      include_role:
        name: "{{ansible_network_os}}"
        tasks_from: backup.yml
      when: ansible_network_os is defined

    # This verifies the backup directory exists on the host you want to store conifgs
    - name: CREATE /tmp/BACKUP DIRECTORY ON {{store_configs}}
      vars:
        ansible_connection: ssh
      file:
        path: /tmp/backup
        state: directory
      delegate_to: "{{store_configs}}"
      run_once: yes

    # We need to remove the seconds (last two digits) because different groups of devices respond at different intervals and the timestamp will be off
    - name: CREATE TIMESTAMP DIRECTORY ON {{store_configs}}
      vars:
        ansible_connection: ssh
        first_device_timestamp: {{groups['all']|first}}
      file:
        path: "/tmp/backup/{{hostvars['first_device_timestamp'].config_output.backup_path.split('.')[-1]}}"
        state: directory
      delegate_to: "{{store_configs}}"
      run_once: yes

    # This might be required because you might be running a Tower cluster
    # e.g. we want the configs backed up to one spot
    # versus scattered indidivual nodes
    # the conditional when doesn't push it, if that router failed earlier
    - name: TRANSFER FILE FROM THIS ANSIBLE HOST TO {{store_configs}}
      vars:
        first_device_timestamp: {{groups['all']|first}}
        backup_filename: "{{config_output.backup_path.split('/')[-1]}}"
        ansible_connection: ssh
        backup_folder: "{{config_output.backup_path.split('.')[-1]}}"
      copy:
        src: "{{config_output.backup_path}}"
        dest: "/tmp/backup/{{backup_folder}}/{{backup_filename}}"
      delegate_to: "{{store_configs}}"
      when: config_output is defined
